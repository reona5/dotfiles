[[plugins]]
repo = '~/.cache/dein/repos/github.com/Shougo/dein.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'seoul256',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ }
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <c-]> <plug>(lsp-definition)
    nmap <buffer> <c-t> <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    
    " refer to doc to add more commands
  endfunction

  augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_signs_error = {'text': '‚ùå'}
  let g:lsp_signs_warning = {'text': '‚ö†Ô∏è'}
  let g:lsp_signs_information = {'text': 'üìñ'}
  let g:lsp_signs_hint = {'text': '‚ùì'}
  highlight link LspErrorText GruvboxRedSign
  highlight clear LspWarningLine
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

# https://github.com/Shougo/dein.vim/issues/74
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  nnoremap <silent> <Leader>f :Files<CR>
  nnoremap <silent> <Leader>F :GFiles?<CR>
  nnoremap <silent> <Leader><Leader> :Buffers<CR>
  nnoremap <silent> <Leader>l :BLines<CR>
  nnoremap <silent> <Leader>. :Snippets<CR>
  nnoremap <silent> <Leader>h :History<CR>
  nnoremap <silent> <Leader>g :Rg<CR>

  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
    \   fzf#vim#with_preview({'options': '--exact --delimiter : --nth 3..'}), <bang>0)
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <Leader>s :Gstatus<CR>
  nnoremap <silent> <Leader>a :Gwrite<CR>
  nnoremap <silent> <Leader>c :Gcommit<CR>
  nnoremap <silent> <Leader>b :Gblame<CR>
  nnoremap <silent> <Leader>d :Gdiff<CR>
  nnoremap <silent> <Leader>m :Gmerge<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
nnoremap <silent> <C-e> :<C-u> Defx <CR> :e <CR>

autocmd BufWritePost * call defx#redraw()
autocmd BufEnter * call defx#redraw()

call defx#custom#option('_', {
  \ 'winwidth': 40,
  \ 'split': 'vertical',
  \ 'direction': 'topleft',
  \ 'show_ignored_files': 1,
  \ 'buffer_name': 'explorer',
  \ 'toggle': 1,
  \ 'resume': 1,
  \ 'columns': 'indent:git:icons:filename:mark',
  \ })

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  setlocal nonumber

  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> A
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> a
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('close_tree')
  nnoremap <silent><buffer><expr> H
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '‚úπ',
  \ 'Staged'    : '‚úö',
  \ 'Untracked' : '‚ú≠',
  \ 'Renamed'   : '‚ûú',
  \ 'Unmerged'  : '‚ïê',
  \ 'Ignored'   : '‚òí',
  \ 'Deleted'   : '‚úñ',
  \ 'Unknown'   : '?'
  \ })
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'sainnhe/gruvbox-material'
hook_add = '''
  let g:gruvbox_material_better_performance = 1
  colorscheme gruvbox-material
'''
