[[plugins]]
repo = '~/.cache/dein/repos/github.com/Shougo/dein.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'seoul256',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ }
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
  let g:coc_global_extensions = [
    \ 'coc-diagnostic'
    \, 'coc-tsserver'
    \, 'coc-solargraph'
    \, 'coc-vetur'
    \, 'coc-tabnine'
    \, 'coc-explorer'
    \, 'coc-markdownlint'
    \, 'coc-eslint'
    \, 'coc-json'
    \, 'coc-yaml'
    \, 'coc-prettier'
    \, 'coc-fzf-preview'
  \]

  " Some servers have issues with backup files, see #649.
  set nobackup
  set nowritebackup

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  xmap ff  <Plug>(coc-format-selected)
  nmap ff  <Plug>(coc-format-selected)
  nmap <silent> L :<C-u>CocList<cr>
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  nmap <silent> <C-]> <Plug>(coc-definition)
  nmap <silent> <C-[> <Plug>(coc-type-definition)
  nmap <silent> <C-u> <Plug>(coc-implementation)
  nmap <silent> <C-t> <Plug>(coc-references)
  nmap <silent> ,r <Plug>(coc-rename)
  nmap <silent> ,f <Plug>(coc-format)
  nmap <silent> <C-e> :CocCommand explorer<CR>
  autocmd CursorHold * silent call CocActionAsync('highlight')
'''

# https://github.com/Shougo/dein.vim/issues/74
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  nnoremap <silent> <leader>f :GFiles<CR>
  nnoremap <silent> <leader>F :Files<CR>
  nnoremap <silent> <leader><leader> :Buffers<CR>
  nnoremap <silent> <leader>l :BLines<CR>
  nnoremap <silent> <leader>. :Snippets<CR>
  nnoremap <silent> <leader>h :History<CR>
  nnoremap <silent> <leader>g :Rg<CR>

  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction

  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <leader>s :Gstatus<CR>
  nnoremap <silent> <leader>a :Gwrite<CR>
  nnoremap <silent> <leader>c :Gcommit<CR>
  nnoremap <silent> <leader>b :Gblame<CR>
  nnoremap <silent> <leader>d :Gdiff<CR>
  nnoremap <silent> <leader>m :Gmerge<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'romgrk/barbar.nvim'
hook_add = '''
nnoremap <silent> <C-s> :BufferOrderByDirectory<CR>
nnoremap <silent> <C-h> :BufferPrevious<CR>
nnoremap <silent> <C-l> :BufferNext<CR>
nnoremap <silent> <C-w> :BufferClose<CR>

" NOTE: This variable doesn't exist before barbar runs. Create it before
"       setting any option.
let bufferline = {}

" Enable/disable animations
let bufferline.animation = v:true

" Enable/disable auto-hiding the tab bar when there is a single buffer
let bufferline.auto_hide = v:false

" Enable/disable icons
" if set to 'numbers', will show buffer index in the tabline
" if set to 'both', will show buffer index and icons in the tabline
let bufferline.icons = v:true

" Configure icons on the bufferline.
let bufferline.icon_separator_active = '▎'
let bufferline.icon_separator_inactive = '▎'
let bufferline.icon_close_tab = ''
let bufferline.icon_close_tab_modified = '●'

" Enable/disable close button
let bufferline.closable = v:true

" Enables/disable clickable tabs
"  - left-click: go to buffer
"  - middle-click: delete buffer
let bufferline.clickable = v:true

" If set, the letters for each buffer in buffer-pick mode will be
" assigned based on their name. Otherwise or in case all letters are
" already assigned, the behavior is to assign letters in order of
" usability (see order below)
let bufferline.semantic_letters = v:true

" New buffer letters are assigned in this order. This order is
" optimal for the qwerty keyboard layout but might need adjustement
" for other layouts.
let bufferline.letters =
  \ 'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP'

" Sets the maximum padding width with which to surround each tab
let bufferline.maximum_padding = 4
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_enabled = 0
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_fileTypeExclude = ['coc-explorer']
'''

[[plugins]]
repo = 'sainnhe/gruvbox-material'
hook_add = '''
  let g:gruvbox_material_better_performance = 1
  colorscheme gruvbox-material
'''
