[[plugins]]
repo = 'ervandew/supertab'
on_i = 1
hook_source = '''
  let g:SuperTabDefaultCompletionType = "<c-n>"
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nmap ; :Denite buffer -split=floating -winrow=1<CR>
  nmap <leader>t :Denite file/rec -split=floating -winrow=1<CR>
  nnoremap <leader>g :<C-u>Denite grep:. -no-empty -mode=normal<CR>
  nnoremap <leader>j :<C-u>DeniteCursorWord grep:. -mode=normal<CR>
endfunction

  nnoremap , <Nop>
  nnoremap ,j <C-w>j
  nnoremap ,k <C-w>k
  nnoremap ,l <C-w>l
  nnoremap ,h <C-w>h
  nnoremap ,J <C-w>J
  nnoremap ,K <C-w>K
  nnoremap ,L <C-w>L
  nnoremap ,H <C-w>H
  nnoremap ,n gt
  nnoremap ,p gT
  nnoremap ,= <C-w>=
  nnoremap ,w <C-w>w
  nnoremap ,o <C-w>_<C-w>|
  nnoremap ,O <C-w>=
  nnoremap ,N :<C-u>bn<CR>
  nnoremap ,P :<C-u>bp<CR>
  nnoremap ,t :<C-u>tabnew<CR>
  nnoremap ,s :<C-u>sp<CR>
  nnoremap ,v :<C-u>vs<CR>
  nnoremap <Leader>q :<C-u>q<CR>
  nnoremap ,Q :<C-u>bd<CR>
'''

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'xhtml', 'javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']
hook_add = '''
  let g:closetag_filenames='*.html'
  let g:closetag_xhtml_filenames='*.jsx,*.tsx,*.vue'
  let g:closetag_filetypes='html'
  let g:closetag_xhtml_filetypes='jsx,tsx,javascript.jsx,typescript.tsx,vue'
  let g:closetag_emptyTags_caseSensitive=1
  let g:closetag_shortcut='>'
'''

[[plugins]]
repo = 'styled-components/vim-styled-components'
rev = 'main'
on_ft = ['javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app && yarn install"'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html']

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['ruby']
hook_add = '''
  let g:ale_sign_error = '❌'
  let g:ale_sign_warning = '⚠️'
  let g:ale_fix_on_save = 1
  let g:ale_fixers = {
  \   'ruby': ['rubocop'],
  \}

  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'tpope/vim-dispatch'
on_ft = ['ruby']

[[plugins]]
repo = 'vim-test/vim-test'
depends = ['vim-dispatch']
on_ft = ['ruby']
hook_add = '''
  function! DockerTransformer(cmd) abort
    let container_id = system("docker ps | grep 3000->3000 | awk '{print $1}'")
    if container_id != ''
      return 'docker exec ' . container_id . ' bundle exec ' . a:cmd
    else
      return 'bundle exec ' . a:cmd
    endif
  endfunction

  let g:test#custom_transformations = {'docker': function('DockerTransformer')}
  let g:test#transformation = 'docker'
  let g:test#strategy = 'dispatch'

  nnoremap <Leader>tn :TestNearest<cr>
  nnoremap <Leader>tf :TestFile<cr>
'''
